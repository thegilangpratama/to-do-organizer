"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/lists/[id]";
exports.ids = ["pages/api/lists/[id]"];
exports.modules = {

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "(api)/./helpers/data-structures.ts":
/*!************************************!*\
  !*** ./helpers/data-structures.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"moveElement\": () => (/* binding */ moveElement)\n/* harmony export */ });\nconst moveElement = (items, from, to)=>{\n    if (from !== to) {\n        const raw = items.filter((_, index)=>index !== from\n        );\n        const firstPart = raw.slice(0, to);\n        const secondPart = raw.slice(to);\n        return [\n            ...firstPart,\n            items[from],\n            ...secondPart\n        ];\n    }\n    return items;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9oZWxwZXJzL2RhdGEtc3RydWN0dXJlcy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsV0FBVyxHQUFHLENBQUNDLEtBQVksRUFBRUMsSUFBWSxFQUFFQyxFQUFVLEdBQUs7SUFDckUsSUFBSUQsSUFBSSxLQUFLQyxFQUFFLEVBQUU7UUFDZixNQUFNQyxHQUFHLEdBQUdILEtBQUssQ0FBQ0ksTUFBTSxDQUFDLENBQUNDLENBQUMsRUFBRUMsS0FBSyxHQUFLQSxLQUFLLEtBQUtMLElBQUk7UUFBQSxDQUFDO1FBQ3RELE1BQU1NLFNBQVMsR0FBR0osR0FBRyxDQUFDSyxLQUFLLENBQUMsQ0FBQyxFQUFFTixFQUFFLENBQUM7UUFDbEMsTUFBTU8sVUFBVSxHQUFHTixHQUFHLENBQUNLLEtBQUssQ0FBQ04sRUFBRSxDQUFDO1FBRWhDLE9BQU87ZUFBSUssU0FBUztZQUFFUCxLQUFLLENBQUNDLElBQUksQ0FBQztlQUFLUSxVQUFVO1NBQUMsQ0FBQztLQUNuRDtJQUVELE9BQU9ULEtBQUssQ0FBQztDQUNkLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGFyY2VudHJpYy8uL2hlbHBlcnMvZGF0YS1zdHJ1Y3R1cmVzLnRzPzUzZTQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IG1vdmVFbGVtZW50ID0gKGl0ZW1zOiBhbnlbXSwgZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSA9PiB7XG4gIGlmIChmcm9tICE9PSB0bykge1xuICAgIGNvbnN0IHJhdyA9IGl0ZW1zLmZpbHRlcigoXywgaW5kZXgpID0+IGluZGV4ICE9PSBmcm9tKTtcbiAgICBjb25zdCBmaXJzdFBhcnQgPSByYXcuc2xpY2UoMCwgdG8pO1xuICAgIGNvbnN0IHNlY29uZFBhcnQgPSByYXcuc2xpY2UodG8pO1xuXG4gICAgcmV0dXJuIFsuLi5maXJzdFBhcnQsIGl0ZW1zW2Zyb21dLCAuLi5zZWNvbmRQYXJ0XTtcbiAgfVxuXG4gIHJldHVybiBpdGVtcztcbn07XG4iXSwibmFtZXMiOlsibW92ZUVsZW1lbnQiLCJpdGVtcyIsImZyb20iLCJ0byIsInJhdyIsImZpbHRlciIsIl8iLCJpbmRleCIsImZpcnN0UGFydCIsInNsaWNlIiwic2Vjb25kUGFydCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./helpers/data-structures.ts\n");

/***/ }),

/***/ "(api)/./helpers/supabase.ts":
/*!*****************************!*\
  !*** ./helpers/supabase.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n\nconst supabaseUrl = \"https://ayrtqhylxnysxfuhiuyi.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF5cnRxaHlseG55c3hmdWhpdXlpIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTcwMDg4NjM1MiwiZXhwIjoyMDE2NDYyMzUyfQ.N0Ghz-kRwBXDkcGaYpux34iCnmVovYiFmtQZB4-yYXg\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (supabase);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9oZWxwZXJzL3N1cGFiYXNlLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRDtBQUVyRCxNQUFNQyxXQUFXLEdBQUdDLDBDQUFvQztBQUN4RCxNQUFNRyxlQUFlLEdBQUdILDZOQUF5QztBQUNqRSxNQUFNSyxRQUFRLEdBQUdQLG1FQUFZLENBQUNDLFdBQVcsRUFBRUksZUFBZSxDQUFDO0FBRTNELGlFQUFlRSxRQUFRLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGFyY2VudHJpYy8uL2hlbHBlcnMvc3VwYWJhc2UudHM/NGQ4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tIFwiQHN1cGFiYXNlL3N1cGFiYXNlLWpzXCI7XG5cbmNvbnN0IHN1cGFiYXNlVXJsID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMO1xuY29uc3Qgc3VwYWJhc2VBbm9uS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVk7XG5jb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5KTtcblxuZXhwb3J0IGRlZmF1bHQgc3VwYWJhc2U7XG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50Iiwic3VwYWJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwic3VwYWJhc2VBbm9uS2V5IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiLCJzdXBhYmFzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./helpers/supabase.ts\n");

/***/ }),

/***/ "(api)/./pages/api/lists/[id].ts":
/*!*********************************!*\
  !*** ./pages/api/lists/[id].ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../helpers/supabase */ \"(api)/./helpers/supabase.ts\");\n/* harmony import */ var _helpers_data_structures__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../helpers/data-structures */ \"(api)/./helpers/data-structures.ts\");\n\n\nconst handler = async (req, res)=>{\n    if (![\n        \"GET\",\n        \"PUT\",\n        \"DELETE\"\n    ].includes(req.method || \"\")) {\n        res.status(405).json({\n            message: \"Method not allowed.\"\n        });\n        return;\n    }\n    const token = req.cookies.access_token;\n    // Get a list user has.\n    if (req.method === \"GET\") {\n        try {\n            const { error: userError  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].auth.api.getUser(token);\n            if (userError) {\n                throw userError;\n            }\n            const { id  } = req.query;\n            const { data: list , error: listError  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"lists\").select(\"*\").eq(\"id\", id).limit(1).single();\n            if (listError) {\n                throw listError;\n            }\n            res.status(200).json({\n                data: list,\n                message: \"There's existing list.\"\n            });\n        } catch (error) {\n            res.status(error.status).json({\n                message: error.message\n            });\n        }\n    }\n    // Update a list user has.\n    if (req.method === \"PUT\") {\n        try {\n            const { error: userError  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].auth.api.getUser(token);\n            if (userError) {\n                throw userError;\n            }\n            const { id  } = req.query;\n            const { title , index  } = req.body;\n            // Get a list that want to update.\n            const { data: list1 , error: listError  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"lists\").select(\"*\").eq(\"id\", id).limit(1).single();\n            if (listError) {\n                throw listError;\n            }\n            // Update the index of each list.\n            if (index !== undefined) {\n                const { data: orderedLists , error: orderedListsError  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"lists\").select(\"*\").eq(\"board_id\", list1.board_id).order(\"index\");\n                if (orderedListsError) {\n                    throw orderedListsError;\n                }\n                const newIndices = (()=>{\n                    const prevIndex = list1.index;\n                    const newIndex = index;\n                    const indices = orderedLists.map((list)=>list.index\n                    );\n                    const result = (0,_helpers_data_structures__WEBPACK_IMPORTED_MODULE_1__.moveElement)(indices, prevIndex, newIndex);\n                    return result;\n                })();\n                for (const [index1, orderedList] of orderedLists.entries()){\n                    const newIndex1 = newIndices.findIndex((newIndex)=>newIndex === index1\n                    );\n                    const { error  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"lists\").update({\n                        index: newIndex1\n                    }).eq(\"id\", orderedList.id);\n                    if (error) {\n                        throw error;\n                    }\n                }\n            }\n            const { error: newListsError  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"lists\").update({\n                title\n            }).eq(\"id\", id);\n            if (newListsError) {\n                throw newListsError;\n            }\n            const { data: newList , error: newListError  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"lists\").select(\"*\").eq(\"id\", id).limit(1).single();\n            if (newListError) {\n                throw newListError;\n            }\n            res.status(200).json({\n                data: newList,\n                message: \"List successfully updated.\"\n            });\n        } catch (error) {\n            res.status(error.status).json({\n                message: error.message\n            });\n        }\n    }\n    // Delete a list user has.\n    if (req.method === \"DELETE\") {\n        try {\n            const { error: userError  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].auth.api.getUser(token);\n            if (userError) {\n                throw userError;\n            }\n            const { id  } = req.query;\n            // Get cards that list has.\n            const { data: cards , error: cardsError  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"cards\").select(\"*\").eq(\"list_id\", id).order(\"index\");\n            if (cardsError) {\n                throw cardsError;\n            }\n            // Delete due dates and checks that card has.\n            for (const card of cards){\n                const { error: deletedDueDatesError  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"due_dates\").delete().eq(\"card_id\", card.id);\n                if (deletedDueDatesError) {\n                    throw deletedDueDatesError;\n                }\n                const { error: deletedChecksError  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"checks\").delete().eq(\"card_id\", card.id);\n                if (deletedChecksError) {\n                    throw deletedChecksError;\n                }\n            }\n            // Delete cards that list has.\n            const { error: deletedCardsError  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"cards\").delete().eq(\"list_id\", id);\n            if (deletedCardsError) {\n                throw deletedCardsError;\n            }\n            // Delete a list by id.\n            const { data: deletedList , error: deletedListError  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"lists\").delete().eq(\"id\", id).order(\"id\").limit(1).single();\n            if (deletedListError) {\n                throw deletedListError;\n            }\n            // Get lists by board ID in order by index.\n            const { data: orderedLists , error: orderedListsError  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"lists\").select(\"*\").eq(\"board_id\", deletedList.board_id).order(\"index\");\n            if (orderedListsError) {\n                throw orderedListsError;\n            }\n            // Update the index of each list.\n            for (const [index, orderedList] of orderedLists.entries()){\n                const { error  } = await _helpers_supabase__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from(\"lists\").update({\n                    index\n                }).eq(\"id\", orderedList.id);\n                if (error) {\n                    throw error;\n                }\n            }\n            res.status(200).json({\n                data: deletedList,\n                message: \"List successfully deleted.\"\n            });\n        } catch (error) {\n            res.status(error.status).json({\n                message: error.message\n            });\n        }\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (handler);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/lists/[id].ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/lists/[id].ts"));
module.exports = __webpack_exports__;

})();